classdef dedalus_post
    %dedalus_POST Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        %%Here, also set arbitrary default value to identify data type..
        %%whether number or a string. 
        
        %%These are parameters included in the flag of the IFSC 2D
        %%simulation with or without shear...
        x_list=1;
        z_list=1;
        kx_list=1;
        kz_list=1;
        Nx=1;
        Ny=1;
        Nz=1;
        Lx=1;
        Ly=1;
        Lz=1;
        t_list=1;
        h5_name='test';
        name='test';
        spectral_z='Fourier';
        flow='test';
        
        Ra_ratio=1;
        post_store_dt=20;
        stop_sim_time=2000;
        
        ks=1;
        F_sin=0;
        F_sin_2ks=0;
        F_sin_3ks=0;
        F_sin_4ks=0;
        
        phase_2ks=0;
        phase_3ks=0;
        phase_4ks=0;
        
        current_path='./';

        A_S=0;
        A_elevator=0;
        A_elevator_imag=0;
        A_noise=0;
        A_shear=0;
        
        k_elevator=0; %%This is the mode for the setting elevator mode in primitive equations
        lambda_elevator=0; %%Store the growth rate of the elevator mode...
        
        A_secondary_T=0;
        A_secondary_S=0;
        k_secondary=0;
        
        
        dy_T_mean=1;
        dy_S_mean=1;
        
        %%parameter added 2021/09/13 for double diffusive in primitive
        %%equation
        R_rho_T2S=1;
        tau=1;
        Pr=1;
        
        %%This is the optimal wavenumber that I need to compute from
        %%Rayleigh ratio
        k_opt=1;

        %%flag for the post processing
        print=0;
        video=0;
        visible=0;
        
        u_laminar_normalize=1;
        
        %%Data I want to store after post-processing
        S; %%snapshot of salnity
        T; %%temperature...
        w; %%snapshot of u
        u; %%snapshot of w
        v;
        p;
        u_fluctuation; %%this minus the laminar base flow
        
        S_coeff; %%fourier coefficient of S
        w_coeff; %%fourier coefficient of u
        u_coeff; %%fourier coefficient of w
        
        E_S; %%salnity potential energy
        E_T;
        TKE_time; %%turbulence kinematic energy... I need to remove the laminar background flow of Kolmogorov type
        spectrum_TKE;
        
        flow_sub_double_diffusive_shear_2D;
        shear_Radko2016_reduced;
        
        Re=1; %#The Reynolds number appearing in front of the inertial term in momentum
        Pe_T=1; %#The Peclet number appearing in front of the inertial term in temperature
        Pe_S=1; %#The Peclet number appearing in front of the inertial term in salinity
        Ra_T=1; %#The Rayleigh number appearing in front of the temperature term, defined as Ra_T=g\alpha T_z L^4/\nu \kappa_T
        Ra_S2T=1; %#The Rayleigh number appearing in front of the salinity term, this is defined based salintiy over temperature, thus Ra_T=g\beta S_z L^4/\nu \kappa_T
        %tau=1; %This tau has been defined before %#This is the diffusivity ratio, \kappa_S/\kappa_T 
        
        
        wS;
        uS;
        uT;
        wT;
        uw;
        
        %new flag added 2021/11/15
        kx=1
        ky=1
        kx_2=0
        ky_2=0
        
        problem='IVP';% #This can be IVP, BVP, EVP depends on the problem you want to solve
        bvp_tolerance=1e-11;% #This is the tolerance for BVP.
        z_bc_w_left='dirichlet';% #This can be also dirichlet
        z_bc_u_v_left='dirichlet';% #This can be periodic, dirichlet, or neumann
        z_bc_T_left='dirichlet';
        z_bc_S_left='dirichlet';
        
        z_bc_w_right='dirichlet';% #This can be also dirichlet
        z_bc_u_v_right='dirichlet';% #This can be periodic, dirichlet, or neumann
        z_bc_T_right='dirichlet';
        z_bc_S_right='dirichlet';
        
        timesteppers='RK443';%
        analysis=0;%
        initial_dt=0.01;
        continuation=0;
        
        %variable for harmonic balance
        w_hat;
        p_hat;
        S_hat;
        d_S_hat;
        T_hat;
        d_T_hat;
        w_hat_2;
        p_hat_2;
        S_hat_2;
        d_S_hat_2;
        T_hat_2;
        d_T_hat_2;
        T_0;
        d_T_0;
        S_0;
        d_S_0;
        
        %These two are useful for the Benard convection. 
        u_hat; %%THese are just converted from the p_hat
        u_hat_2; 

        %These are additiona u, v, and their derivative for the Benard
        %convection of harmonic balance. 
        u_tilde;
        d_u_tilde;
        v_tilde;
        d_v_tilde;
        
        %
        Nu;%Nusselt number 
        Nu_S;
        d_T_0_mid; %d_T_0 at the mid plane
        d_S_0_mid;
        T_rms_mid;
        S_rms_mid;
        u_rms_mid;
        w_rms_mid;        
        
        uvw_hewitt=1; %whether we want to convert to the unit of Hewitt..
    
        T_0_handle=0;
        S_0_handle=0;
        
        IBM_A=1000;
        IBM_z0=1/2;
        IBM_sigma=0.0001
       
        z_T_BL=0;
        z_S_BL=0;
        d_T_0_overshoot=0;
        d_S_0_overshoot=0;
        
        z_T_rms_max=0;
        z_S_rms_max=0;
        
        T_rms_max=0;
        S_rms_max=0;
        
    end
    
    methods
        function obj = dedalus_post(h5_name,flag)
            %dedalus_post Construct an instance of this class
            %   Detailed explanation goes here
            if nargin<2 || isempty(flag)
                flag.print=1;
                flag.video=1;
                flag.visible=1;
            end
            %construction function...
            obj.h5_name=h5_name;%name for the h5file
            
            %modify these flag.
            obj.print=flag.print;
            obj.video=flag.video;
            obj.visible=flag.visible;
            
            %display h5 file
            h5disp(h5_name);
            
            %read the flag_table.
            flag_table=readtable([h5_name(1:end-14),'flag.txt']);
            for table_ind=1:length(flag_table.x_Test)
               if isnumeric(obj.(flag_table.x_Test{table_ind}(3:end)))
                   obj.(flag_table.x_Test{table_ind}(3:end))=str2num(flag_table.x123_{table_ind}(1:end-1));
               else
                   obj.(flag_table.x_Test{table_ind}(3:end))=flag_table.x123_{table_ind}(1:end-1);
               end
            end
        end
        
        function obj = dedalus_post_ivp(obj)
            h5_name=obj.h5_name;
        %read data for x, z, t, kx, kz, and compute Lx, Lz
            obj.x_list=h5read_complex(h5_name,'/scales/x/1.0');
            obj.Nx=length(obj.x_list);
            obj.z_list=h5read_complex(h5_name,'/scales/z/1.0');
            obj.Nz=length(obj.z_list);
            obj.t_list=h5read_complex(h5_name,'/scales/sim_time');
            obj.kx_list=h5read_complex(h5_name,'/scales/kx');
            obj.kz_list=h5read_complex(h5_name,'/scales/kz');
            
            %be careful about this in computing Lx and Lz
            obj.Lx=max(obj.x_list)-min(obj.x_list)+obj.x_list(2);
            obj.Lz=max(obj.z_list)-min(obj.z_list)+obj.z_list(2);
            
            
            %compute the optimal wavenumber IFSC.. This is only suitable
            %for IFSC.. see 
            obj.k_opt=(1/2*(-2-obj.Ra_ratio+sqrt(obj.Ra_ratio^2+8*obj.Ra_ratio)))^(1/4);
        end
        
        function obj = dedalus_post_bvp(obj)
            %read the data for BVP... These are results for harmonic
            %balance...
            h5_name=obj.h5_name;
            obj.z_list=h5read_complex(h5_name,'/scales/z/1.0');
            obj.w_hat=h5read_complex(h5_name,'/tasks/w_hat');
            obj.p_hat=h5read_complex(h5_name,'/tasks/p_hat');
            switch obj.flow
                case 'HB_porous'
                    obj.u_tilde=-obj.kx*obj.p_hat;
                case {'HB_benard','HB_benard_shear'}
                    obj.u_tilde=h5read_complex(h5_name,'/tasks/u_tilde');
                    obj.v_tilde=h5read_complex(h5_name,'/tasks/v_tilde');
                    obj.d_u_tilde=h5read_complex(h5_name,'/tasks/d_u_tilde');
                    obj.d_v_tilde=h5read_complex(h5_name,'/tasks/d_v_tilde');
            end
            obj.T_hat=h5read_complex(h5_name,'/tasks/T_hat');
            obj.d_T_hat=h5read_complex(h5_name,'/tasks/d_T_hat');
            obj.S_hat=h5read_complex(h5_name,'/tasks/S_hat');
            obj.d_S_hat=h5read_complex(h5_name,'/tasks/d_S_hat');
            obj.T_0=h5read_complex(h5_name,'/tasks/T_0');
            obj.d_T_0=h5read_complex(h5_name,'/tasks/d_T_0');
            obj.S_0=h5read_complex(h5_name,'/tasks/S_0');
            obj.d_S_0=h5read_complex(h5_name,'/tasks/d_S_0');

            %read the second harmonic data if any...
            if obj.kx_2~= 0 || obj.ky_2~=0
                obj.w_hat_2=h5read_complex(h5_name,'/tasks/w_hat_2');
                if obj.flow=='HB_porous'
                    obj.p_hat=h5read_complex(h5_name,'/tasks/p_hat_2');
                elseif obj.flow=='HB_benard'
                    error('This is not supported yet');
                    obj.u_tilde_2=h5read_complex(h5_name,'/tasks/u_tilde_2');
                    obj.v_tilde_2=h5read_complex(h5_name,'/tasks/v_tilde_2');
                end
                obj.T_hat_2=h5read_complex(h5_name,'/tasks/T_hat_2');
                obj.d_T_hat_2=h5read_complex(h5_name,'/tasks/d_T_hat_2');
                obj.S_hat_2=h5read_complex(h5_name,'/tasks/S_hat_2');
                obj.d_S_hat_2=h5read_complex(h5_name,'/tasks/d_S_hat_2');
            end
            
            if obj.uvw_hewitt & obj.flow=='HB_porous'
                obj.w_hat=obj.w_hat/obj.Ra_T;
                obj.p_hat=obj.p_hat/obj.Ra_T;
                obj.u_tilde=obj.u_tilde/obj.Ra_T;
                obj.v_tilde=obj.v_tilde/obj.Ra_T;
                obj.w_hat_2=obj.w_hat_2/obj.Ra_T;
                obj.p_hat_2=obj.p_hat_2/obj.Ra_T;
            end
            
            mid_ind=length(obj.z_list)/2;
            obj.Nu=-(obj.d_T_0+obj.dy_T_mean);%Nusselt number 
            obj.Nu_S=-(obj.d_S_0+obj.dy_S_mean); %nussel number for salinity... also add the background one...
            [T_BL_ind]=find(diff(sign(obj.d_T_0)));%min(abs(obj.d_T_0+obj.dy_T_mean));
            obj.z_T_BL=obj.z_list(T_BL_ind(1));
            obj.d_T_0_overshoot=max(obj.d_T_0+obj.dy_T_mean);
            
            [S_BL_ind]=find(diff(sign(obj.d_S_0)));
            obj.z_S_BL=obj.z_list(S_BL_ind(1));
            obj.d_S_0_overshoot=max(obj.d_T_0+obj.dy_S_mean);

            obj.T_rms_max=max(obj.T_hat(mid_ind)*sqrt(2));
            [~,max_ind]=max(obj.T_hat);
            obj.z_T_rms_max=obj.z_list(max_ind(1));
            
            obj.S_rms_max=max(obj.S_ha)
            obj.z_S_rms_max=
            
            obj.d_T_0_mid=obj.d_T_0(mid_ind)+obj.dy_T_mean; %d_T_0 at the mid plane
            obj.d_S_0_mid=obj.d_S_0(mid_ind)+obj.dy_S_mean;
            obj.T_rms_mid=obj.T_hat(mid_ind)*sqrt(2);
            obj.S_rms_mid=obj.S_hat(mid_ind)*sqrt(2);
            obj.w_rms_mid=obj.w_hat(mid_ind)*sqrt(2);
            switch obj.flow
                case 'HB_porous'
                    obj.u_rms_mid=obj.kx*abs(obj.p_hat(mid_ind))*sqrt(2);
                case {'HB_benard','HB_benard_shear'}
                    obj.u_rms_mid=abs(obj.u_tilde(mid_ind))*sqrt(2);
            end
        end
        
        function obj=bvp_plot(obj)
            plot_config.print=obj.print;
            plot_config.visible=obj.visible;
            
            %Set up the sign for the background temperature and salintiy
            if obj.dy_T_mean==-1
                T_mean_var=1+obj.dy_T_mean*obj.z_list;
                T_mean_sign='+1-z';
                dy_T_mean_sign='-1';
            elseif obj.dy_T_mean==1
                T_mean_var=obj.dy_T_mean*obj.z_list;
                T_mean_sign='+z';
                dy_T_mean_sign='+1';
            end
            
            if obj.dy_S_mean==-1
                S_mean_var=1+obj.dy_S_mean*obj.z_list;
                S_mean_sign='+1-z';
                dy_S_mean_sign='-1';
            elseif obj.dy_S_mean==1
                S_mean_var=obj.dy_S_mean*obj.z_list;
                S_mean_sign='+z';
                dy_S_mean_sign='+1';
            end
            
            data{1}.x=obj.T_0+T_mean_var;
            data{1}.y=obj.z_list;
            plot_config.fontsize=20;

            plot_config.label_list={1,['$\bar{T}_0',T_mean_sign,'$'], '$z$'};
            plot_config.print_size=[1,500,900];
            plot_config.name=[obj.h5_name(1:end-3),'_HB_','T_0.png'];
            plot_line(data,plot_config);

            data{1}.x=obj.d_T_0+obj.dy_T_mean;
            data{1}.y=obj.z_list;
            plot_config.fontsize=20;
            plot_config.label_list={1,['$\partial_z \bar{T}_0',dy_T_mean_sign,'$'], '$z$'};
            plot_config.print_size=[1,500,900];
            plot_config.name=[obj.h5_name(1:end-3),'_HB_','d_T_0.png'];
            plot_line(data,plot_config);

            data{1}.x=obj.T_0+T_mean_var;
            data{1}.y=obj.z_list;
            plot_config.label_list={1,['$\bar{T}_0',T_mean_sign,'$'], '$z$'};
            plot_config.print_size=[1,500,900];
            plot_config.ylim_list=[1,0,0.01];
            plot_config.name=[obj.h5_name(1:end-3),'_HB_','T_0_local.png'];
            plot_line(data,plot_config);
            plot_config.ylim_list=0;

            data{1}.x=obj.T_0+T_mean_var;
            data{1}.y=obj.z_list;
            plot_config.label_list={1,['$\bar{T}_0',T_mean_sign,'$'], '$z$'};
            plot_config.print_size=[1,500,900];
            plot_config.ylim_list=[1,0.49,0.51];
%             plot_config.xlim_list=[1,0.49,0.51];
            plot_config.name=[obj.h5_name(1:end-3),'_HB_','T_0_local_core.png'];
            plot_line(data,plot_config);
            plot_config.ylim_list=0; %plot_config.xlim_list=0;

            
            
            data{1}.x=obj.S_0+S_mean_var;
            data{1}.y=obj.z_list;
            plot_config.label_list={1,['$\bar{S}_0',S_mean_sign,'$'], '$z$'};
            plot_config.print_size=[1,500,900];
            plot_config.name=[obj.h5_name(1:end-3),'_HB_','S_0.png'];
            plot_line(data,plot_config);
            
            data{1}.x=obj.d_S_0+obj.dy_S_mean;
            data{1}.y=obj.z_list;
            plot_config.label_list={1,['$\partial_z \bar{S}_0',dy_S_mean_sign,'$'], '$z$'};
            plot_config.print_size=[1,500,900];
            plot_config.name=[obj.h5_name(1:end-3),'_HB_','d_S_0.png'];
            plot_line(data,plot_config);

            data{1}.x=obj.S_0+S_mean_var;
            data{1}.y=obj.z_list;
            plot_config.label_list={1,['$\bar{S}_0',S_mean_sign,'$'], '$z$'};
            plot_config.print_size=[1,500,900];
            plot_config.ylim_list=[1,0,0.01];
            plot_config.name=[obj.h5_name(1:end-3),'_HB_','S_0_local.png'];
            plot_line(data,plot_config);
            plot_config.ylim_list=0;

            data{1}.x=obj.S_0+S_mean_var;
            data{1}.y=obj.z_list;
            plot_config.label_list={1,['$\bar{S}_0',S_mean_sign,'$'], '$z$'};
            plot_config.print_size=[1,500,900];
            plot_config.ylim_list=[1,0.49,0.51];
%             plot_config.xlim_list=[1,0.49,0.51];
            plot_config.name=[obj.h5_name(1:end-3),'_HB_','S_0_local_core.png'];
            plot_line(data,plot_config);
            plot_config.ylim_list=0;% plot_config.xlim_list=0;


            data{1}.x=obj.T_hat;
            data{1}.y=obj.z_list;
            plot_config.label_list={1,'$\widehat{T}$', '$z$'};
            plot_config.print_size=[1,500,900];
            plot_config.name=[obj.h5_name(1:end-3),'_HB_','T_hat.png'];
            plot_line(data,plot_config);

            data{1}.x=obj.S_hat;
            data{1}.y=obj.z_list;
            plot_config.label_list={1,'$\widehat{S}$', '$z$'};
            plot_config.print_size=[1,500,900];
            plot_config.name=[obj.h5_name(1:end-3),'_HB_','S_hat.png'];
            plot_line(data,plot_config);


            data{1}.x=obj.S_hat;
            data{1}.y=obj.z_list;
            plot_config.label_list={1,'$\widehat{S}$', '$z$'};
            plot_config.print_size=[1,500,900];
            plot_config.ylim_list=[1,0,0.01];
            plot_config.name=[obj.h5_name(1:end-3),'_HB_','S_hat_local.png'];
            plot_line(data,plot_config);
            plot_config.ylim_list=0;

            data{1}.x=obj.w_hat;
            data{1}.y=obj.z_list;
            plot_config.label_list={1,'$\widehat{w}$', '$z$'};
            plot_config.print_size=[1,500,900];
            plot_config.name=[obj.h5_name(1:end-3),'_HB_','w_hat.png'];
            plot_line(data,plot_config);
            
            data{1}.x=obj.u_tilde;
            data{1}.y=obj.z_list;
            plot_config.label_list={1,'$\widetilde{u}$', '$z$'};
            plot_config.print_size=[1,500,900];
            plot_config.name=[obj.h5_name(1:end-3),'_HB_','u_tilde.png'];
            plot_line(data,plot_config);
            
            %Update 2021/12/06, add streamline...
            data{1}.x=linspace(0,1,10);
            data{1}.y=linspace(0,1,10);
            data{1}.z=NaN*ones(10,10);
            x=linspace(0,2*pi,1000);
            %z_ind_N=length(obj.z_list)/10;
            %z_ind=round(linspace(1,length(obj.z_list),z_ind_N));
            z_ind=1:length(obj.z_list);
            y=obj.z_list(z_ind);
            [data{2}.x,data{2}.y]=meshgrid(x,y);
            %data{2}.y=obj.z_list;
            data{2}.u=obj.u_tilde(z_ind)*real(1i*exp(1i*x));
            data{2}.v=obj.w_hat(z_ind)*real(exp(1i*x));
            plot_config.xlim_list=[1,0,2*pi];
            plot_config.xtick_list=[1,0,pi/2,pi,3*pi/2,2*pi];
            plot_config.xticklabels_list={1,'$0$','$\frac{\pi}{2}$','$\pi$','$\frac{3\pi}{2}$','$2\pi$'};
            plot_config.label_list={1,'$x k_x$','$z$'};
            plot_config.streamline=1;
            plot_config.user_color_style_marker_list={'k-','b--'};
            plot_config.panel_num=2;
            plot_config.colorbar=0;
            plot_config.name=[obj.h5_name(1:end-3),'_HB_','streamline.png'];
            plot_contour(data,plot_config);
            
        end
        
        function obj=snapshot(obj,variable_name)
            %%plot the snapshot of salinity and generate video if any
            obj.S=h5read_complex(obj.h5_name,['/tasks/',variable_name]);

            variable_max=max(max(max(obj.(variable_name))));
            variable_min=min(min(min(obj.(variable_name))));
            if obj.video
                for t_ind=1:length(obj.t_list)
                    data{1}.z=obj.(variable_name)(:,:,t_ind);

                    data{1}.x=obj.x_list;
                    data{1}.y=obj.z_list;
                    plot_config.label_list={1,'$x$','$z$'};

                    plot_config.fontsize=28;
                    plot_config.zlim_list=[1,variable_min,variable_max];
                    plot_config.colormap='bluewhitered';%bluewhitered
                    plot_config.print_size=[1,1200,1200];
                    plot_config.name=[obj.h5_name(1:end-3),'_snapshot_',variable_name,'_t_',num2str(round(obj.t_list(t_ind),2)),'.png'];
                    plot_config.print=obj.print;
                    plot_config.visible=obj.visible;
                    snapshot(t_ind)=plot_contour(data,plot_config);
                end
               plot_config.name=[obj.h5_name(1:end-3),'_snapshot_',variable_name,'_t_video.avi'];
               plot_video(snapshot,plot_config);
            end
        end
        
        function obj=spectrum_snapshot(obj,variable_name)
            %%plot the spectrum of salnity as time varies, also generate
            %%video if any
            obj.([variable_name,'_coeff'])=h5read_complex(obj.h5_name,['/tasks/',variable_name,'_coeff']);
            %coeff.r+1i*coeff.i;
            if obj.video
                for t_ind=1:length(obj.t_list)
                    clear data plot_config;
                    
                    data{1}.x=obj.kx_list;
                    data{1}.y=obj.kz_list(1:obj.Nz/2);
                    plot_config.label_list={1,'$k_x$','$k_z$'};
                    data{1}.z=log10(abs(obj.([variable_name,'_coeff'])(1:obj.Nz/2,:,t_ind)).^2);
                    %data{2}.x=obj.kx_list/obj.k_opt;
                    %data{2}.y=obj.ks/obj.k_opt*ones(size(obj.kx_list));
                    plot_config.print_size=[1,1100,900];
                    plot_config.loglog=[0,0];
                    plot_config.print=obj.print;
                    plot_config.visible=obj.visible;
                    %plot_config.xtick_list=[0.01,0.1,1,10];

                    plot_config.colormap='white_zero';
                    plot_config.name=[obj.h5_name(1:end-3),'_spectrum_',variable_name,'_2D_t_',num2str(round(obj.t_list(t_ind),2)),'.png'];
                    frame_spectrum_2D(t_ind)=plot_contour(data,plot_config);

                    dx=diff(obj.kx_list); dx=dx(1);
                    dz=diff(obj.kz_list); dz=dz(1);
                    
                    data{1}.x=obj.kx_list;
                    data{2}.x=obj.kz_list(1:obj.Nz/2);
                    plot_config.label_list={1,'$k_x$ or $k_z$',''};
                    data{1}.y=2*dz*sum(abs(obj.([variable_name,'_coeff'])(1:obj.Nz/2,:,t_ind)).^2,1);
                    data{2}.y=2*dx*sum(abs(obj.([variable_name,'_coeff'])(1:obj.Nz/2,:,t_ind)).^2,2);
                    
    %                 data{3}.y=linspace(min(data{1}.y),10);
                    plot_config.loglog=[1,1];
                    plot_config.ytick_list=[0,0.001,0.01,0.1,1,10,100,1000];
                    plot_config.ylim_list=[0];%,0.1,10];
                    plot_config.xtick_list=[1,0.001,0.01,0.1,1,10,100];
                    plot_config.legend_list={1,['$\int E_',variable_name,'(k_x,k_z)dk_z$'],['$\int E_',variable_name,'(k_x,k_z)d k_x$']};
                    plot_config.name=[obj.h5_name(1:end-3),'_spectrum_',variable_name,'_1D_t_',num2str(round(obj.t_list(t_ind),2)),'.png'];
                    plot_config.print=obj.print;
                    plot_config.visible=obj.visible;
                    frame_spectrum_1D(t_ind)=plot_line(data,plot_config);
                end
               plot_config.name=[obj.h5_name(1:end-3),'_spectrum_',variable_name,'_2D_t_video.avi'];
               plot_video(frame_spectrum_2D,plot_config);
               plot_config.name=[obj.h5_name(1:end-3),'_spectrum_',variable_name,'_1D_t_video.avi'];
               plot_video(frame_spectrum_1D,plot_config);
           end
        end
        
        function obj=spectrum_average(obj,variable_name)
            %%This function plot the 
            %%plot the overall spectrum averaged over time
            obj.([variable_name,'_coeff'])=h5read_complex(obj.h5_name,['/tasks/',variable_name,'_coeff']);
            %coeff.r+1i*coeff.i;
            
            data{1}.x=obj.kx_list;
            data{1}.y=obj.kz_list(1:obj.Nz/2);
            plot_config.label_list={1,'$k_x$','$k_z$'};

%             obj.(variable_name)=h5read_complex(obj.h5_name,['/tasks/',variable_name]);
%             for t_ind=1:length(obj.t_list)
%                 obj.(['E_',variable_name])(t_ind)=sum(sum(obj.(variable_name)(:,:,t_ind).^2))/obj.Nx/obj.Nz/2;
%             end
%             [val,max_ind]=max(obj.(['E_',variable_name]));
%             
            spectrum_average=mean(abs(obj.([variable_name,'_coeff'])(1:obj.Nz/2,:,1:end)).^2,3);
            data{1}.z=log10(spectrum_average);
            plot_config.loglog=[0,0];
            plot_config.print_size=[1,1100,900];
            plot_config.colormap='white_zero';
            plot_config.name=[obj.h5_name(1:end-3),'_spectrum_',variable_name,'_2D_time_average.png'];
            plot_config.print=obj.print;
            plot_config.ytick_list=[0,10^(-8),10^(-7),10^(-6),10^(-5),10^(-4),...
                0.001,0.01,0.1,1,10,100,1000];
            plot_config.xtick_list=[0,10^(-8),10^(-7),10^(-6),10^(-5),10^(-4),...
                0.001,0.01,0.1,1,10,100,1000];
            plot_config.visible=obj.visible;
            plot_contour(data,plot_config);
            
            dx=diff(obj.kx_list); dx=dx(1);
            dz=diff(obj.kz_list); dz=dz(1);

            data{1}.x=obj.kx_list;
            data{1}.y=2*dz*sum(spectrum_average,1);
            data{2}.x=obj.kz_list(1:obj.Nz/2);
            data{2}.y=2*dx*sum(spectrum_average,2);
            
            plot_config.loglog=[1,1];
            
            plot_config.label_list={1,'$k_x$ or $k_z$',''};
            plot_config.legend_list={1,['$\int E_',variable_name,'(k_x,k_z)dk_z$'],['$\int E_',variable_name,'(k_x,k_z)d k_x$']};
            plot_config.name=[obj.h5_name(1:end-3),'_spectrum_',variable_name,'_1D_time_average.png'];
            plot_config.print=obj.print;
            plot_config.visible=obj.visible;
            plot_line(data,plot_config);
        end
        
        
        function obj=spectrum_TKE_average(obj)
            %%This function plot the kinetic energy, (deduct the background laminar flow)
            %%This is average over time... plot the turbulence kinetic
            %%energy spectrum as kx and kz
            
            %%This is the post-processing for the TKE in 2D... 
            obj.w_coeff=h5read_complex(obj.h5_name,'/tasks/w_coeff');
            %=w_coeff.r+1i*w_coeff.i;
            obj.u_coeff=h5read_complex(obj.h5_name,'/tasks/u_coeff');
            %obj.u_coeff=u_coeff.r+1i*u_coeff.i;
            for t_ind=1:length(obj.t_list)
                obj.spectrum_TKE(:,:,t_ind)=abs(obj.u_coeff(:,:,t_ind)).^2+abs(obj.w_coeff(:,:,t_ind)).^2;
            end

%             obj.u=h5read_complex(obj.h5_name,'/tasks/u');
%             obj.w=h5read_complex(obj.h5_name,'/tasks/w');
% 
%             for t_ind=1:length(obj.t_list)
%                 obj.TKE_time(t_ind)=sum(sum(obj.u(:,:,t_ind).^2+obj.w(:,:,t_ind).^2))/obj.Nx/obj.Nz/2;
%             end
% 
%             [val,max_ind]=max(obj.TKE_time);
            spectrum_TKE_average=mean(abs(obj.spectrum_TKE(1:obj.Nz/2,:,1:end)).^2,3);%max(3*max_ind,30)

            data{1}.z=log10(spectrum_TKE_average);
            data{1}.x=obj.kx_list;
            data{1}.y=obj.kz_list(1:obj.Nz/2);
            
            plot_config.loglog=[0,0];
            plot_config.print_size=[1,1100,900];
            plot_config.label_list={1,'$k_x$','$k_z$'};
            plot_config.colormap='white_zero';
            plot_config.name=[obj.h5_name(1:end-3),'_spectrum_TKE_2D_time_average.png'];
            plot_config.print=obj.print;
            plot_config.visible=obj.visible;
            plot_contour(data,plot_config);
            
            dx=diff(obj.kx_list); dx=dx(1);
            dz=diff(obj.kz_list); dz=dz(1);

            data{1}.x=obj.kx_list;
            data{1}.y=2*dz*sum(spectrum_TKE_average,1);
            data{2}.x=obj.kz_list(1:obj.Nz/2);
            data{2}.y=2*dx*sum(spectrum_TKE_average,2);
            
            plot_config.loglog=[1,1];
            plot_config.ytick_list=[0,0.001,0.01,0.1,1,10,100,1000];
            plot_config.label_list={1,'$k_x$ or $k_z$',''};
            plot_config.legend_list={1,'$\int E_u(k_x,k_z)dk_z$','$\int E_u(k_x,k_z)d k_x$'};
            plot_config.name=[obj.h5_name(1:end-3),'_spectrum_TKE_1D_time_average.png'];
            plot_config.print=obj.print;
            plot_config.visible=obj.visible;
            plot_line(data,plot_config);
        end
        
        function obj=E_time(obj,variable_name,elevator_growth_rate)
            %%Plot the salinity potential energy as a function over time
            if nargin<2 || isempty(variable_name)
                variable_name='S';
            end
            
            if nargin<3 || isempty(elevator_growth_rate)
                elevator_growth_rate=0;    
                %flag.mean='laminar_cou';   %%default value of flag_mean if not given, just set the laminar  flow.
                    %error('The flag_mean is missing.')
            end
            obj.(variable_name)=h5read_complex(obj.h5_name,['/tasks/',variable_name]);
            
            for t_ind=1:length(obj.t_list)
                obj.(['E_',variable_name])(t_ind)=sum(sum(obj.(variable_name)(:,:,t_ind).^2))/obj.Nx/obj.Nz/2;
            end
            data{1}.x=obj.t_list;
            data{1}.y=obj.(['E_',variable_name]);
            plot_config.label_list={1,'$t$',['$E_',variable_name,'$']};
            plot_config.legend_list={0};
            if elevator_growth_rate
                [val,max_ind]=max(obj.(['E_',variable_name]));
                [~,ind_100]=min(abs(obj.t_list-100));
                t_grow=obj.t_list(1:max_ind);
                if max_ind==1
                    data{2}.x=obj.t_list;
                elseif max_ind>ind_100
                    data{2}.x=obj.t_list(1:ind_100);
                else
                    data{2}.x=t_grow;
                end
                if strcmp(obj.flow,'IFSC_2D')
                    lambda_opt=2*pi/obj.k_opt;
                    data{2}.y=obj.(['E_',variable_name])(max_ind)*exp(2*lambda_opt*(t_grow-max(t_grow)));
                    plot_config.legend_list={1,'Simulation','Linear stability'};
                elseif strcmp(obj.flow,'double_diffusive_2D')
                    k2=obj.k_elevator^2;
                    A=[-k2*obj.Pr, obj.Pr, -obj.Pr/obj.R_rho_T2S;
                        -obj.dy_T_mean, -k2, 0;
                        -obj.dy_S_mean, 0, -obj.tau*k2];
                    
                    [vec,lambda]=eig(A);
                    [val,lambda_max_ind]=max(real(diag(lambda)));
                    lambda_max=lambda(lambda_max_ind,lambda_max_ind);
                    vec_max=vec(:,lambda_max_ind);
                    switch variable_name
                        case 'S'
                             S_vec_max=vec_max(3);
                        case 'T'
                             S_vec_max=vec_max(2);
                    end
                    for t_ind=1:length(data{2}.x)
                        S2_LST=(obj.(variable_name)(:,:,1)*real(exp(lambda_max*(data{2}.x(t_ind)-data{2}.x(1)))) ...
                            -obj.(variable_name)(:,:,1)/real(S_vec_max)*imag(S_vec_max)*imag(exp(lambda_max*(data{2}.x(t_ind)-data{2}.x(1))))).^2;
                        data{2}.y(t_ind)=sum(sum(S2_LST))/obj.Nx/obj.Nz/2;
                    end
                    %data{2}.y=obj.E_S(1)*exp(2*lambda_max*(obj.t_list));
                    %data{2}.x=obj.t_list;
                elseif strcmp(obj.flow,'double_diffusive_shear_2D')
                    k2=obj.k_elevator^2;
                    A=[-k2, obj.Ra_T, -obj.Ra_S2T;
                        -obj.dy_T_mean, -k2, 0;
                        -obj.dy_S_mean, 0, -obj.tau*k2];
                    B=diag([obj.Re,obj.Pe_T,obj.Pe_S]);
                    [vec,lambda]=eig(A,B);
                    lambda(isinf(lambda)|isnan(lambda)) = -Inf;

                    [val,lambda_max_ind]=max(real(diag(lambda)));
                    lambda_max=lambda(lambda_max_ind,lambda_max_ind);
                    vec_max=vec(:,lambda_max_ind);
                    switch variable_name
                        case 'S'
                             S_vec_max=vec_max(3);
                        case 'T'
                             S_vec_max=vec_max(2);
                    end
                    for t_ind=1:length(data{2}.x)
                        S2_LST=(obj.(variable_name)(:,:,1)*real(exp(lambda_max*(data{2}.x(t_ind)-data{2}.x(1)))) ...
                            -obj.(variable_name)(:,:,1)/real(S_vec_max)*imag(S_vec_max)*imag(exp(lambda_max*(data{2}.x(t_ind)-data{2}.x(1))))).^2;
                        data{2}.y(t_ind)=sum(sum(S2_LST))/obj.Nx/obj.Nz/2;
                    end
                    plot_config.legend_list={1,'Simulation','Linear stability'};
                end
            end
            plot_config.name=[obj.h5_name(1:end-3),'_E_',variable_name,'.png'];
            plot_config.Markerindex=3;
            plot_config.user_color_style_marker_list={'k-','bo--'};
            plot_config.print=obj.print;
            plot_config.visible=obj.visible;
            plot_line(data,plot_config);
            
            plot_config.name=[obj.h5_name(1:end-3),'_E_',variable_name,'_loglog.png'];
%             plot_config.label_list={1,'$t$','$\textrm{log}_{10}(E_S)$'};
            plot_config.loglog=[0,1];
            plot_line(data,plot_config);

            if obj.video
                data{1}.x=obj.t_list;
                data{1}.y=obj.(['E_',variable_name]);
                for t_ind=1:length(obj.t_list)
                    data{2}.x=data{1}.x(t_ind);
                    data{2}.y=data{1}.y(t_ind);
                    plot_config.Markerindex=3;
                    plot_config.user_color_style_marker_list={'k-','rsquare'};

                    plot_config.fontsize=28;
                    plot_config.print_size=[1,1200,1200];
                    plot_config.print=0;
                    plot_config.visible=0;
                    plot_config.legend_list={0};
                    plot_config.loglog=[0,0];
                    plot_config.label_list={1,'$t$',['$E_',variable_name,'$']};

                    E_time(t_ind)=plot_line(data,plot_config);
                end
               plot_config.name=[obj.h5_name(1:end-3),'_E_',variable_name,'_t_video.avi'];
               plot_video(E_time,plot_config);
            end
            
        end
                
        function obj=E_TKE_time(obj)
            %%Plot the turbulence kinetic energy as a function over time
            obj=obj.u_fluctuation_read;
            obj.w=h5read_complex(obj.h5_name,'/tasks/w');
            for t_ind=1:length(obj.t_list)
                obj.TKE_time(t_ind)=sum(sum(obj.w(:,:,t_ind).^2+obj.u_fluctuation(:,:,t_ind)))/obj.Nx/obj.Nz/2;
            end
            data{1}.x=obj.t_list;
            data{1}.y=obj.TKE_time;
            plot_config.label_list={1,'$t$','$E_u$'};
            plot_config.legend_list={0};
            plot_config.name=[obj.h5_name(1:end-3),'_E_TKE.png'];
            plot_config.Markerindex=3;
            plot_config.user_color_style_marker_list={'k-','bo--'};
            plot_config.print=obj.print;
            plot_config.visible=obj.visible;
            plot_line(data,plot_config);
        end
        
        
        function obj=u_laminar(obj)
            %%plot the laminar base flow of kolmogorov shear flow
            %%Here, also plot u', u'', and |u|'. that is the derivative of
            %%the absolute value of u... Here, normalize these quantity
            %%with the maximum magnitude as 1, if any 
            syms z;
            u_laminar=obj.F_sin/obj.ks^2*sin(obj.ks*z)...
                      +obj.F_sin_2ks/(2*obj.ks)^2*sin(2*obj.ks*z+obj.phase_2ks)...
                      +obj.F_sin_3ks/(3*obj.ks)^2*sin(3*obj.ks*z+obj.phase_3ks)...
                      +obj.F_sin_4ks/(4*obj.ks)^2*sin(4*obj.ks*z+obj.phase_4ks);
            data{1}.x=double(subs(u_laminar,z,obj.z_list));
            data{2}.x=double(subs(diff(u_laminar,z),z,obj.z_list));
            data{3}.x=double(subs(diff(diff(u_laminar,z),z),z,obj.z_list));
            data{4}.x=double(subs(diff(abs(u_laminar),z),z,obj.z_list));
  
            data{1}.y=obj.z_list;
            data{2}.y=obj.z_list;
            data{3}.y=obj.z_list;
            data{4}.y=obj.z_list;
            plot_config.label_list={1,'','$z$'};
            
            if obj.u_laminar_normalize
                data{1}.x=data{1}.x/max(abs(data{1}.x));
                data{2}.x=data{2}.x/max(abs(data{2}.x));
                data{3}.x=data{3}.x/max(abs(data{3}.x));
                data{4}.x=data{4}.x/max(abs(data{4}.x));
            end
            
            plot_config.legend_list={1,'$u_L$','$u_L''$','$u_L''''$','$|u_L|''$'};
            plot_config.print_size=[1,900,1200];
            plot_config.Markerindex=3;
            plot_config.xlim_list=[1,-1,2];
            plot_config.ylim_list=[1,min(data{1}.y),max(data{1}.y)];
            plot_config.user_color_style_marker_list={'k-','b--','r-.','bo'};
            plot_config.name=[obj.h5_name(1:end-3),'_u_laminar_normalized_',num2str(obj.u_laminar_normalize),'.png'];
            plot_line(data,plot_config);
        end
        
        function obj=u_fluctuation_read(obj)
            %%read the u fluctuation... this is done by firstly reading the
            %%total velocity and then construct the laminar base flow.
            %%Then, just remove the laminar base flow. 
            
            syms z;
            u_laminar=obj.F_sin/obj.ks^2*sin(obj.ks*z)...
                      +obj.F_sin_2ks/(2*obj.ks)^2*sin(2*obj.ks*z+obj.phase_2ks)...
                      +obj.F_sin_3ks/(3*obj.ks)^2*sin(3*obj.ks*z+obj.phase_3ks)...
                      +obj.F_sin_4ks/(4*obj.ks)^2*sin(4*obj.ks*z+obj.phase_4ks);
            u_laminar_num=double(subs(u_laminar,z,obj.z_list));
            obj.u=h5read_complex(obj.h5_name,'/tasks/u');
            obj.u_fluctuation=obj.u;
            for z_ind=1:length(u_laminar_num)
                obj.u_fluctuation(z_ind,:,:)=obj.u(z_ind,:,:)-u_laminar_num(z_ind);
            end
        end
        
        function obj=u_fluctuation_x_ave(obj)
            %%plot the streamwise averaged u fluctuations...
            %%as a function of z (vertical axis) and time
            obj=obj.u_fluctuation_read();

            data{1}.x=obj.t_list;
%             if strcmp(obj.flow(1:7),'IFSC_2D')
%                 data{1}.y=obj.z_list/(2*pi/obj.k_opt);
%                 plot_config.label_list={1,'$t$','$z/l_{opt}$'};
%             else
                data{1}.y=obj.z_list;
                plot_config.label_list={1,'$t$','$z$'};
%             end
            data{1}.z=squeeze(mean(obj.u_fluctuation,2));
            plot_config.colormap='bluewhitered';
            plot_config.print_size=[1,1200,1200];
            plot_config.print=obj.print;
            plot_config.name=[obj.h5_name(1:end-3),'_u_fluctuation_x_ave.png'];
            plot_contour(data,plot_config);
            
            data{1}.z=squeeze(mean(abs(obj.u_fluctuation),2));
            plot_config.name=[obj.h5_name(1:end-3),'_u_fluctuation_mag_x_ave.png'];
            plot_contour(data,plot_config);
        end

        
        
        function obj=x_ave(obj,variable_name)
            %%plot the streamwise averaged salnity
            %%as a function of z (vertical axis) and time

            data{1}.x=obj.t_list;
%             if strcmp(obj.flow(1:7),'IFSC_2D')
%                 data{1}.y=obj.z_list/(2*pi/obj.k_opt);
%                 plot_config.label_list={1,'$t$','$z/l_{opt}$'};
%             else
                data{1}.y=obj.z_list;
                plot_config.label_list={1,'$t$','$z$'};
%             end
            switch variable_name
                case {'u','v','w','S','T','p'}
                    obj.(variable_name)=h5read_complex(obj.h5_name,['/tasks/',variable_name]);
                case {'uS','wS','uT','wT','uw'}%%
                    var_1=variable_name(1);
                    var_2=variable_name(2);
                    if strcmp(var_1,'u') %%this require in default, the u is always in the first variable....
                       obj=obj.u_fluctuation_read();
                       var_1_data=obj.u_fluctuation;
                    else
                       var_1_data=h5read_complex(obj.h5_name,['/tasks/',var_1]);
                    end
                    var_2_data=h5read_complex(obj.h5_name,['/tasks/',var_2]);
                    obj.(variable_name)=var_1_data.*var_2_data;
            end
            data{1}.z=squeeze(mean(obj.(variable_name),2));
%             plot_config.label_list={1,'$t$','$z/l_{opt}$'};
            plot_config.colormap='bluewhitered';
            plot_config.print_size=[1,1200,1200];
            plot_config.print=obj.print;
            plot_config.name=[obj.h5_name(1:end-3),'_',variable_name,'_x_ave.png'];
            plot_contour(data,plot_config);
            
        end
        
        function obj=total_xt_ave(obj,variable_name)
%             data{1}.y=obj.z_list/(2*pi/obj.k_opt);
%             dz=diff(obj.z_list); dz=dz(1);
%             z_list_full=[obj.z_list;obj.z_list(end)+dz];
            switch variable_name
                case {'T','S'}
                    variable_data=h5read_complex(obj.h5_name,['/tasks/',variable_name]);
                    data{1}.x=obj.(['dy_',variable_name,'_mean'])*obj.z_list;
                    data{2}.x=obj.(['Pe_',variable_name])*squeeze(mean(mean(variable_data,2),3))+obj.(['dy_',variable_name,'_mean'])*obj.z_list;
                    plot_config.legend_list={1,['$\bar{\mathcal{',variable_name,'}}_z z$'],['$\bar{\mathcal{',variable_name,'}}_z z+Pe_',variable_name,'\langle ',variable_name,'''\rangle_h$']};
                case {'rho'}
                    %error('not ready');
                    variable_data_T=h5read_complex(obj.h5_name,['/tasks/T']);
                    variable_data_S=h5read_complex(obj.h5_name,['/tasks/S']);

                    R_rho_T2S=obj.Ra_T/obj.Ra_S2T;
                    data{1}.x=-obj.dy_T_mean*obj.z_list+1/R_rho_T2S*obj.dy_S_mean*obj.z_list;
                    data{2}.x=-(obj.Pe_T*squeeze(mean(mean(variable_data_T,2),3))+obj.dy_T_mean*obj.z_list)...
                        +1/R_rho_T2S*(obj.Pe_S*squeeze(mean(mean(variable_data_S,2),3))+obj.dy_S_mean*obj.z_list);
                    plot_config.legend_list={1,['$-\bar{\mathcal{T}}_z z+R_\rho^{-1}\bar{\mathcal{S}}_z z$'],['$-(\bar{\mathcal{T}}_z z+Pe_T \langle ','T','''\rangle_h)+R_\rho^{-1}(\bar{\mathcal{S}}_z z+Pe_S \langle ','S','''\rangle_h)$']};
                    plot_config.fontsize_legend=24;
                case 'u'
                    u=h5read_complex(obj.h5_name,'/tasks/u');
                    syms z;
                    u_laminar=obj.F_sin/obj.ks^2*sin(obj.ks*z)...
                              +obj.F_sin_2ks/(2*obj.ks)^2*sin(2*obj.ks*z+obj.phase_2ks)...
                              +obj.F_sin_3ks/(3*obj.ks)^2*sin(3*obj.ks*z+obj.phase_3ks)...
                              +obj.F_sin_4ks/(4*obj.ks)^2*sin(4*obj.ks*z+obj.phase_4ks);
                    u_laminar_num=double(subs(u_laminar,z,obj.z_list));
                    data{1}.x=u_laminar_num;
                    data{2}.x=squeeze(mean(mean(u,2),3));
                    plot_config.legend_list={1,['$\bar{',variable_name,'}$'],['$\bar{',variable_name,'} +''\langle ',variable_name,'''\rangle_h$']};

            end
%             if strcmp(obj.flow(1:7),'IFSC_2D')
%                 data{1}.y=obj.z_list/(2*pi/obj.k_opt);
%                 data{2}.y=obj.z_list/(2*pi/obj.k_opt);
%                 plot_config.label_list={1,'','$z/l_{opt}$'};
%             else
                data{1}.y=obj.z_list;
                data{2}.y=obj.z_list;
                plot_config.label_list={1,'','$z$'};
%             end
            plot_config.ylim_list=[1,min(data{1}.y),max(data{1}.y)];
%             plot_config.label_list={1,'','$z/l_{opt}$'};
            plot_config.print_size=[1,1200,1200];
            plot_config.print=obj.print;
            plot_config.name=[obj.h5_name(1:end-3),'_',variable_name,'_total_xt_ave.png'];
            plot_line(data,plot_config);
            
            plot_config.print=0;
            plot_config.visible=0;
            switch variable_name
                case {'T','S'}
                if obj.video

                    for t_ind=1:length(obj.t_list)
                        data{2}.x=squeeze(mean(variable_data(:,:,t_ind),2))+obj.z_list;
                        snapshot(t_ind)=plot_line(data,plot_config);
                    end
                   plot_config.name=[obj.h5_name(1:end-3),'_',variable_name,'_total_xt_ave_video.avi'];
                   plot_video(snapshot,plot_config);
                end
                otherwise
                    warning('No video for this case');
            end
            
        end
        
        function Nu_kx=get_Nu_kx_Toomre(obj)
            Nu_kx=[0.759282	5.46973
                0.868806	5.84515
                1.14156	6.47067
                1.41393	6.98488
                1.65953	7.58263
                1.98612	8.12456
                2.42145	8.80539
                2.82923	9.34715
                3.1282	9.72217
                3.53561	10.1526
                4.13284	10.694
                4.72984	11.1658
                5.89592	11.859
                7.11565	12.413
                8.11822	12.7726
                9.49968	13.1315
                11.2325	13.3505
                12.6401	13.431
                13.3436	13.4017
                14.534	13.2879
                15.3725	13.1471
                16.4272	12.8944
                17.1301	12.6703
                18.1842	12.2786
                18.9409	11.9431
                19.9405	11.4401];
                        
        end
        
        
        function Nu_Ra=get_Nu_Ra_Toomre(obj)
            Nu_Ra=[1.02E+05	2.48817
                2.02E+05	3.10341
                4.11E+05	3.82865
                8.08E+05	4.7231
                1.48E+06	5.63688
                2.76E+06	6.65424
                5.26E+06	7.85553
                1.10E+07	9.58605
                2.52E+07	11.6997
                5.01E+07	13.6621
                1.31E+08	16.863
                3.03E+08	20.5816
                7.30E+08	25.3996
                1.47E+09	29.988
                3.53E+09	37.008
                9.36E+09	46.6941];

        end
        
    end
end
%%-------------Old code that are repeated....

          
%             if strcmp(obj.flow(1:7),'IFSC_2D')
%                 data{1}.y=obj.z_list/(2*pi/obj.k_opt);
%                 data{2}.y=obj.z_list/(2*pi/obj.k_opt);
%                 data{3}.y=obj.z_list/(2*pi/obj.k_opt);
%                 data{4}.y=obj.z_list/(2*pi/obj.k_opt);
%                 plot_config.label_list={1,'','$z/l_{opt}$'};
%             else


%             syms z;
%             u_laminar=obj.F_sin/obj.ks^2*sin(obj.ks*z)...
%                       +obj.F_sin_2ks/(2*obj.ks)^2*sin(2*obj.ks*z+obj.phase_2ks)...
%                       +obj.F_sin_3ks/(3*obj.ks)^2*sin(3*obj.ks*z+obj.phase_3ks)...
%                       +obj.F_sin_4ks/(4*obj.ks)^2*sin(4*obj.ks*z+obj.phase_4ks);
%             u_laminar_num=double(subs(u_laminar,z,obj.z_list));
%             obj.u=h5read_complex(obj.h5_name,'/tasks/u');
%             obj.u_fluctuation=obj.u;
%             for z_ind=1:length(u_laminar_num)
%                 obj.u_fluctuation(z_ind,:,:)=obj.u(z_ind,:,:)-u_laminar_num(z_ind);
%             end
%         
%         function obj=uS_x_ave(obj)
%             %%plot the streamwise averaged uS
%             %%as a function of z (vertical axis) and time
%             %%Here, u is fluctuations that need to call u_fluctuation_read.
%             
%             data{1}.x=obj.t_list;
% %             data{1}.y=obj.z_list/(2*pi/obj.k_opt);
%             if strcmp(obj.flow(1:7),'IFSC_2D')
%                 data{1}.y=obj.z_list/(2*pi/obj.k_opt);
%                 plot_config.label_list={1,'$t$','$z/l_{opt}$'};
%             else
%                 data{1}.y=obj.z_list;
%                 plot_config.label_list={1,'$t$','$z$'};
%             end
%             S=h5read_complex(obj.h5_name,'/tasks/S');
%             obj=obj.u_fluctuation_read();
%             obj.uS=S.*obj.u_fluctuation;
%             data{1}.z=squeeze(mean(obj.uS,2));
% %             plot_config.label_list={1,'$t$','$z/l_{opt}$'};
%             plot_config.colormap='bluewhitered';
%             plot_config.print_size=[1,1200,1200];
%             plot_config.print=obj.print;
%             plot_config.name=[obj.h5_name(1:end-3),'_uS_x_ave.png'];
%             plot_contour(data,plot_config);
%         end
%         
%         function obj=wS_x_ave(obj)
%             %%plot the streamwise averaged wS
%             %%as a function of z (vertical axis) and time
%             
%             data{1}.x=obj.t_list;
% %             data{1}.y=obj.z_list/(2*pi/obj.k_opt);
%             if strcmp(obj.flow(1:7),'IFSC_2D')
%                 data{1}.y=obj.z_list/(2*pi/obj.k_opt);
%                 plot_config.label_list={1,'$t$','$z/l_{opt}$'};
%             else
%                 data{1}.y=obj.z_list;
%                 plot_config.label_list={1,'$t$','$z$'};
%             end
%             S=h5read_complex(obj.h5_name,'/tasks/S');
%             w=h5read_complex(obj.h5_name,'/tasks/w');
%             obj.wS=w.*S;
%             data{1}.z=squeeze(mean(obj.wS,2));
% %             plot_config.label_list={1,'$t$','$z/l_{opt}$'};
%             plot_config.colormap='bluewhitered';
%             plot_config.print_size=[1,1200,1200];
%             plot_config.print=obj.print;
%             plot_config.name=[obj.h5_name(1:end-3),'_wS_x_ave.png'];
%             plot_contour(data,plot_config);
%         end



%         function obj=T_total_xt_ave(obj)
% %             data{1}.y=obj.z_list/(2*pi/obj.k_opt);
%             T=h5read_complex(obj.h5_name,'/tasks/T');
% %             data{1}.y=obj.z_list/(2*pi/obj.k_opt);
%             data{1}.x=obj.z_list;
% %             data{2}.y=obj.z_list/(2*pi/obj.k_opt);
%             data{2}.x=squeeze(mean(mean(T,2),3))+obj.z_list;
%             if strcmp(obj.flow(1:7),'IFSC_2D')
%                 data{1}.y=obj.z_list/(2*pi/obj.k_opt);
%                 data{2}.y=obj.z_list/(2*pi/obj.k_opt);
%                 plot_config.label_list={1,'$t$','$z/l_{opt}$'};
%             else
%                 data{1}.y=obj.z_list;
%                 data{2}.y=obj.z_list
%                 plot_config.label_list={1,'$t$','$z$'};
%             end
%             plot_config.ylim_list=[1,min(data{1}.y),max(data{1}.y)];
% %             plot_config.label_list={1,'','$z/l_{opt}$'};
%             plot_config.legend_list={1,'$\bar{T}$','$\bar{T}+T$'}
%             plot_config.print_size=[1,1200,1200];
%             plot_config.print=obj.print;
%             plot_config.name=[obj.h5_name(1:end-3),'_T_total_xt_ave.png'];
%             plot_line(data,plot_config);
%         end
%         
%         function obj=u_total_xt_ave(obj)
%             u=h5read_complex(obj.h5_name,'/tasks/u');
%             syms z;
%             u_laminar=obj.F_sin/obj.ks^2*sin(obj.ks*z)...
%                       +obj.F_sin_2ks/(2*obj.ks)^2*sin(2*obj.ks*z+obj.phase_2ks)...
%                       +obj.F_sin_3ks/(3*obj.ks)^2*sin(3*obj.ks*z+obj.phase_3ks)...
%                       +obj.F_sin_4ks/(4*obj.ks)^2*sin(4*obj.ks*z+obj.phase_4ks);
%             u_laminar_num=double(subs(u_laminar,z,obj.z_list));
%             
%             
% %             data{1}.y=obj.z_list/(2*pi/obj.k_opt);
%             data{1}.x=u_laminar_num;
%             
% %             data{2}.y=obj.z_list/(2*pi/obj.k_opt);
%             data{2}.x=squeeze(mean(mean(u,2),3));
%             if strcmp(obj.flow(1:7),'IFSC_2D')
%                 data{1}.y=obj.z_list/(2*pi/obj.k_opt);
%                 data{2}.y=obj.z_list/(2*pi/obj.k_opt);
%                 plot_config.label_list={1,'$t$','$z/l_{opt}$'};
%             else
%                 data{1}.y=obj.z_list;
%                 data{2}.y=obj.z_list
%                 plot_config.label_list={1,'$t$','$z$'};
%             end
%             plot_config.ylim_list=[1,min(data{1}.y),max(data{1}.y)];
% %             plot_config.label_list={1,'','$z/l_{opt}$'};
%             plot_config.legend_list={1,'$\bar{U}$','$\bar{U}+u$'};
%             plot_config.print_size=[1,1200,1200];
%             plot_config.print=obj.print;
%             plot_config.name=[obj.h5_name(1:end-3),'_u_total_xt_ave.png'];
%             plot_line(data,plot_config);
%         end

        
%         function obj=w_x_ave(obj)
%             %%plot the streamwise averaged w velocity (vertical velocity)
%             %%as a function of z (vertical axis) and time
% 
%             data{1}.x=obj.t_list;
%             if strcmp(obj.flow(1:7),'IFSC_2D')
%                 data{1}.y=obj.z_list/(2*pi/obj.k_opt);
%                 plot_config.label_list={1,'$t$','$z/l_{opt}$'};
%             else
%                 data{1}.y=obj.z_list;
%                 plot_config.label_list={1,'$t$','$z$'};
%             end
%             obj.w=h5read_complex(obj.h5_name,'/tasks/w');
%             data{1}.z=squeeze(mean(obj.w,2));
%             plot_config.colormap='bluewhitered';
%             plot_config.print_size=[1,1200,1200];
%             plot_config.print=obj.print;
%             plot_config.name=[obj.h5_name(1:end-3),'_w_x_ave.png'];
%             plot_contour(data,plot_config);
%             
%             data{1}.z=squeeze(mean(abs(obj.w),2));
%             plot_config.name=[obj.h5_name(1:end-3),'_w_mag_x_ave.png'];
%             plot_contour(data,plot_config);
%         end
        
        



%         function obj=E_T_time(obj,elevator_growth_rate)
%             %%Plot the salinity potential energy as a function over time
%             
%             
%             if nargin<2 || isempty(elevator_growth_rate)
%                 elevator_growth_rate=0;    
%                 %flag.mean='laminar_cou';   %%default value of flag_mean if not given, just set the laminar  flow.
%                     %error('The flag_mean is missing.')
%             end
%             obj.T=h5read_complex(obj.h5_name,'/tasks/T');
%             
%             for t_ind=1:length(obj.t_list)
%                 obj.E_T(t_ind)=sum(sum(obj.T(:,:,t_ind).^2))/obj.Nx/obj.Nz/2;
%             end
%             data{1}.x=obj.t_list;
%             data{1}.y=obj.E_T;
%             plot_config.label_list={1,'$t$','$E_T$'};
%             plot_config.legend_list={0};
%             if elevator_growth_rate
%                 [val,max_ind]=max(obj.E_T);
%                 [~,ind_100]=min(abs(obj.t_list-100));
%                 t_grow=obj.t_list(1:max_ind);
%                 if max_ind==1
%                     data{2}.x=obj.t_list;
%                 elseif max_ind>ind_100
%                     data{2}.x=obj.t_list(1:ind_100);
%                 else
%                     data{2}.x=t_grow;
%                 end
%                 if strcmp(obj.flow,'IFSC_2D')
%                     lambda_opt=2*pi/obj.k_opt;
%                     data{2}.y=obj.E_T(max_ind)*exp(2*lambda_opt*(t_grow-max(t_grow)));
%                     plot_config.legend_list={1,'Simulation','Linear stability'};
%                 elseif strcmp(obj.flow,'double_diffusive_2D')
%                     k2=obj.k_elevator^2;
%                     A=[-k2*obj.Pr, obj.Pr, -obj.Pr/obj.R_rho_T2S;
%                         -obj.dy_T_mean, -k2, 0;
%                         -obj.dy_S_mean, 0, -obj.tau*k2];
%                     
%                     [vec,lambda]=eig(A);
%                     [val,lambda_max_ind]=max(real(diag(lambda)));
%                     lambda_max=lambda(lambda_max_ind,lambda_max_ind);
%                     vec_max=vec(:,lambda_max_ind);
%                     T_vec_max=vec_max(2);
%                     for t_ind=1:length(data{2}.x)
%                         T2_LST=(obj.T(:,:,1)*real(exp(lambda_max*(data{2}.x(t_ind)-data{2}.x(1)))) ...
%                           -obj.T(:,:,1)/real(T_vec_max)*imag(T_vec_max)*imag(exp(lambda_max*(data{2}.x(t_ind)-data{2}.x(t_ind))))).^2;
%                         data{2}.y(t_ind)=sum(sum(T2_LST))/obj.Nx/obj.Nz/2;
%                     end
%                     %data{2}.y=obj.E_S(1)*exp(2*lambda_max*(obj.t_list));
%                     %data{2}.x=obj.t_list;
% 
%                     plot_config.legend_list={1,'Simulation','Linear stability'};
%                 end
%             end
%             plot_config.name=[obj.h5_name(1:end-3),'_E_T.png'];
%             plot_config.Markerindex=3;
%             plot_config.user_color_style_marker_list={'k-','bo--'};
%             plot_config.print=obj.print;
%             plot_config.visible=obj.visible;
%             plot_line(data,plot_config);
%             
%             plot_config.name=[obj.h5_name(1:end-3),'_E_T_loglog.png'];
% %             plot_config.label_list={1,'$t$','$\textrm{log}_{10}(E_T)$'};
%             plot_config.loglog=[0,1];
%             plot_line(data,plot_config);
% 
%             
%             data{1}.x=obj.t_list;
%             data{1}.y=obj.E_T;
%             for t_ind=1:length(obj.t_list)
%                 data{2}.x=data{1}.x(t_ind);
%                 data{2}.y=data{1}.y(t_ind);
%                 plot_config.Markerindex=3;
%                 plot_config.user_color_style_marker_list={'k-','rsquare'};
%             
%                 plot_config.fontsize=28;
%                 plot_config.print_size=[1,1200,1200];
%                 plot_config.print=0;
%                 plot_config.visible=0;
%                 plot_config.legend_list={0};
%                 E_T_time(t_ind)=plot_line(data,plot_config);
%             end
%             if obj.video
%                plot_config.name=[obj.h5_name(1:end-3),'_E_T_t_video.avi'];
%                plot_video(E_T_time,plot_config);
%             end
%             
%         end
% 


